consolidating  合并
morphosis	形态形成;
pendulum   摆，钟摆; 摇摆不定的事态（或局面）
oscillating	振荡; （使）
resemble   与…相像，类似于;
suffice		足够; 有能力
attributed  认为…是
morphed	 变种
plethora   过多，过剩; [医] 多血，多血症
conversions	变换( conversion的名词复数 )


第一章:  为什么选择同构JavaScript?
作者: Jason Strimpel and Maxime Najim

在2010年，Tweeter发布了它的新版重构网站。新版的Tweeter网站将UI渲染和业务逻辑交给了前端JavaScript。
对于2010年来说，这种架构方式是具有开创性的。
然而，在接下来的两年内，Tweeter又发布了它网站的再次重构版本，这个版本将渲染逻辑又重新回归到服务端。
这次架构上的改变使得Tweeter将页面加载的首屏时间缩短到了原来的1/5。
Tweeter将网站回归服务端渲染的举动在JavaScript社区引起了不小的震动。
Tweeter网站及业界的开发者很快意识到客户端渲染对网站性能会有显著的影响。

········
客户端应用最大的性能问题存在于首次下载JS文件的过程。
由于网络传输层面的TCP协议有一种调节流量的慢启动机制，而这种机制是让数据包以一个速度递增的方式传输的。
Ilya Gri‐gorik在他的《高性能浏览器网络》一书中解释了在服务端和客户端传输64KB流量,TCP需要经历的四次握手和百秒级别的延迟。
显然，首次到达用户的数据对于用户体验和页面的响应速度至关重要。
········


这些仅包括script和空body标签的客户端JavaScript应用的兴起，带来了首屏加载缓慢和网页空白的问题。这些应用创建了基于hash(#!)形式的url，同时对搜索引擎抓取也表现的很不友好。
同构JavaScript就是通过统一客户端及服务端的代码运行方式，来避免以上这些问题而产生的。
它通过两种不同的架构形式来优化加载执行策略，同时，它具有更好的可维护性和用户体验。

定义同构JavaScript

同构JavaScript应用是指在客户端和服务端共享同一套JS代码的应用。
这些应用之所以称为同构，是因为它们的代码形式和组织与客户端及服务端的运行环境无关。
JS发展具有突破性的下一步必然要考虑同构。但是，软件技术的发展总是像是钟摆，不断的趋向一个
处于摆动中的平衡点。如果你有一定时间的软件开发经验，你很有可能经历过架构设计的淘汰和回归。
有的时候，仿佛我们永远不能找到一个正确的平衡点，一个在两种对立方案间的折中点。

这种情况在近20年的网页开发应用中体现的最为明显。
我们经历过网页从蓝色的超链接时代过渡到与可以与native应用媲美且富用户交互体验的时代。
这一切的发展是通过将前后端开发的重心从后端逐渐迁移到了前端的开发模式转变而产生的。
但是，这种转变也带来了很多麻烦的问题，相关问题我们会在这章讲到。
目前，有足够的需求急需一种平衡前后端的开发模式。但是，为了让我们真正认识到这个平衡点的重要性，
我们必须先回顾下网络应用在过去几十年的演进历程。

评估别的网络架构解决方案

为了理解同构JavaScript解决方案的模式，我们必须先了解它是在什么场景下诞生的。
第一步就是要明确它的使用场景。

········
第二章介绍了两种不同类型的同构JS应用并进行了架构层面的分析。我们将要研究的同构JS的首要类型是电子商务网站。
········

为何而生

万维网的发明归功于蒂姆·伯纳斯·李，蒂姆在为一家核研究公司做一个名为"Enquire"的项目时采用了超链接的概念。在1989年，蒂姆应用了超链接的概念，并且将一个中心化的、包含各类文档链接数据库和协议组合在一起。随着时间的发展，这个数据库演变得越来越巨大，对我们的生活也产生了巨大的影响。比如日常的消费购物，网上各式各样的信息都充斥着我们的生活。商业家门意识到用户在网上具有太多的选择了，他们逐渐开始关注自家的SEO工程师是否可以优化搜索，以便将他们的产品排在更容易被用户看到的地方。
然而，SEO并不是商战的终点。一旦用户发现了你的产品并点击网页，你的页面必须快速加载，同时对用户的行进行及时响应，不然所有的客户将会逐渐流失到竞争者那边。
这就是我们IT工程师在商业考虑之外需要着手处理的问题。

工程师的焦虑




