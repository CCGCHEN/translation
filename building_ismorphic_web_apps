consolidating  合并
morphosis	形态形成;
pendulum   摆，钟摆; 摇摆不定的事态（或局面）
oscillating	振荡; （使）
resemble   与…相像，类似于;
suffice		足够; 有能力
attributed  认为…是
morphed	 变种
plethora   过多，过剩; [医] 多血，多血症
conversions	变换( conversion的名词复数 )
premise	前提
enquire	询问; 打听; 问问题
abysmal	深不可测的; 完全的; 
replication	 复制，折叠; 
rubble	碎石，瓦砾; 碎砖
eschew	避开，回避
sluggish   行动迟缓


第一章:  为什么选择同构JavaScript?
作者: Jason Strimpel and Maxime Najim

在2010年，Tweeter发布了它的新版重构网站。新版的Tweeter网站将UI渲染和业务逻辑交给了前端JavaScript。
对于2010年来说，这种架构方式是具有开创性的。
然而，在接下来的两年内，Tweeter又发布了它网站的再次重构版本，这个版本将渲染逻辑又重新回归到服务端。
这次架构上的改变使得Tweeter将页面加载的首屏时间缩短到了原来的1/5。
Tweeter将网站回归服务端渲染的举动在JavaScript社区引起了不小的震动。
Tweeter网站及业界的开发者很快意识到客户端渲染对网站性能会有显著的影响。

注: ==>
········
客户端应用最大的性能问题存在于首次下载JS文件的过程。
由于网络传输层面的TCP协议有一种调节流量的慢启动机制，而这种机制是让数据包以一个速度递增的方式传输的。
Ilya Gri‐gorik在他的《高性能浏览器网络》一书中解释了在服务端和客户端传输64KB流量,TCP需要经历的四次握手和百秒级别的延迟。
显然，首次到达用户的数据对于用户体验和页面的响应速度至关重要。
········


这些仅包括script和空body标签的客户端JavaScript应用的兴起，带来了首屏加载缓慢和网页空白的问题。这些应用创建了基于hash(#!)形式的url，同时对搜索引擎抓取也表现的很不友好。
同构JavaScript就是通过统一客户端及服务端的代码运行方式，来避免以上这些问题而产生的。
它通过两种不同的架构形式来优化加载执行策略，同时，它具有更好的可维护性和用户体验。

定义同构JavaScript

同构JavaScript应用是指在客户端和服务端共享同一套JS代码的应用。
这些应用之所以称为同构，是因为它们的代码形式和组织与客户端及服务端的运行环境无关。
JS发展具有突破性的下一步必然要考虑同构。但是，软件技术的发展总是像是钟摆，不断的趋向一个
处于摆动中的平衡点。如果你有一定时间的软件开发经验，你很有可能经历过架构设计的淘汰和回归。
有的时候，仿佛我们永远不能找到一个正确的平衡点，一个在两种对立方案间的折中点。

这种情况在近20年的网页开发应用中体现的最为明显。
我们经历过网页从蓝色的超链接时代过渡到与可以与native应用媲美且富用户交互体验的时代。
这一切的发展是通过将前后端开发的重心从后端逐渐迁移到了前端的开发模式转变而产生的。
但是，这种转变也带来了很多麻烦的问题，相关问题我们会在这章讲到。
目前，有足够的需求急需一种平衡前后端的开发模式。但是，为了让我们真正认识到这个平衡点的重要性，
我们必须先回顾下网络应用在过去几十年的演进历程。

评估别的网络架构解决方案

为了理解同构JavaScript解决方案的模式，我们必须先了解它是在什么场景下诞生的。
第一步就是要明确它的使用场景。

········
第二章介绍了两种不同类型的同构JS应用并进行了架构层面的分析。我们将要研究的同构JS的首要类型是电子商务网站。
········

A Climate for Change

The creation of the World Wide Web is attributed to Tim Berners Lee, who, while working for a nuclear research company on a project known as “Enquire” experimen‐ ted with the concept of hyperlinks. In 1989, Tim applied the concept of hyperlinks and put a proposal together for a centralized database that contained links to other documents. Over the course of time, this database has morphed into something much

larger and has had a huge impact on our daily lives (e.g., through social media) and business (ecommerce). We are all teenagers stuck in a virtual mall. The variety of content and shopping options empowers us to make informed decisions and purcha‐ ses. Businesses realize the plethora of choices we have as consumers, and are greatly concerned with ensuring that we can find and view their content and products, with the ultimate goal of achieving conversions (buying stuff)—so much so that there are search engine optimization (SEO) experts whose only job is to make content and products appear higher in search results. However, that is not where the battle for conversions ends. Once consumers can find the products, the pages must load quickly and be responsive to user interactions, or else the businesses might lose the consumers to competitors. This is where we, engineers, enter the picture, and we have our own set of concerns in addition to the business’s concerns.


为何而生

万维网的发明归功于蒂姆·伯纳斯·李，蒂姆在为一家核研究公司做一个名为"Enquire"的项目时采用了超链接的概念。在1989年，蒂姆应用了超链接的概念，并且将一个中心化的、包含各类文档链接数据库和协议组合在一起。随着时间的发展，这个数据库演变得越来越巨大，对我们的生活也产生了巨大的影响。比如日常的消费购物，网上各式各样的信息都充斥着我们的生活。商业家门意识到用户在网上具有太多的选择了，他们逐渐开始关注自家的SEO工程师是否可以优化搜索，以便将他们的产品排在更容易被用户看到的地方。
然而，SEO并不是商战的终点。一旦用户发现了你的产品并点击网页，你的页面必须快速加载，同时对用户的行进行及时响应，不然所有的客户将会逐渐流失到竞争者那边。
这就是我们IT工程师在商业考虑之外需要着手处理的问题。


Engineering Concerns

As engineers, we have a number of concerns, but for the most part these concerns fall into the main categories of maintainability and efficiency. That is not to say that we do not consider business concerns when weighing technical decisions. As a matter of fact, good engineers do exactly the opposite: they find the optimal engineering solu‐ tion by contemplating the short- and long-term pros and cons of each possibility within the context of the business problem at hand.

工程师的焦虑

作为工程师，我们对问题的大部分考虑在于代码的开发效率和可维护性上面。
这并不是说我们在进行技术选型的时候不会考虑商业的因素。
事实上，好的开发工程师会从另一个角度考虑: 他们会在产品需求问题的长短期目标基础上，选择一个最佳的技术解决方案。


Available Architectures

Taking into account the primary business use case, an ecommerce application, we are going to examine a couple of different architectures within the context of history. Before we take a look at the architectures, we should first identify some key accept‐ ance criteria, so we can fairly evaluate the different architectures. In order of impor‐ tance:
1. The application should be able to be indexed by search engines.
2. The application’s first page load should be optimized—i.e., the critical rendering
path should be part of the initial response.
3. The application should be responsive to user interactions (e.g., optimized page
transitions).

注:==>
The critical rendering path is the content that is related to the pri‐ mary action a user wants to take on the page. In the case of an ecommerce application it would be a product description. In the case of a news site it would be an article’s content.These business criteria will also be weighed against the primary engineering con‐ cerns, maintainability and efficiency, throughout the evaluation process.

可用的架构方式

我们以最常见的商业案例: 电子商务网站来分析这类网站的在历史进程中的架构演变。
在分析之前，我们首先提炼出几大核心准则以便正确评估不同的架构方案。
我们按照如下方式来安排重要程度的优先级:
1. 这个应用能够被搜索引擎索引到。
2. 这个应用的首屏加载需要优化，比如在首次响应中就应该渲染正确的url路径。
3. 这个应用能够正确的相应用户操作，比如优化过的页面切换。

注: ==>
正确的url路径指的是用户期望看到的页面，比如在电商网站中可能是产品详情页，在新闻网站可能是一篇文章的内容页。
除了可维护性、开发效率之外，这些商业原则在代码架构中也是需要评估的原则。

经典的网站架构

如上面所述，网络设计和创建的初衷是分享信息。
由于万维网当初就是为了通讯而创建的工程，这也不难理解为什么网站刚创建的时候，
网页仅仅是互相带有链接的多页文本。
在1990年代，大部分的网页都是纯的html页面。支撑这些html页面的机制是HTML、URI和http。
HTML(超文本标记语言)是可以被浏览器解析成文档对象的语法标记规范。
URI(统一资源定位符)用来标示资源，比如某种响应请求的服务器名字。
HTTP(超文本传输协议)是连接所有这一切的传输协议。
这三个机制组成了经典网络应用的基石。

经典网站架构中的HTML一般是由服务器端采用类似PHP、Ruby、Java等来渲染。
当浏览器解析HTML的时候，JS文件才进行初始化以，由此丰富用户在网页上的交互体验。
===图片===
简而言之，上图就是经典的网站架构模式。我们来看一下它是如何权衡我们刚刚提出的代码架构准则和工程上的考虑的。

首先，它能非常容易的被搜索引擎索引到，因为所有的内容都已在服务端准备就绪，因此，用户可以方便的看到网站的内容。
其次，由于网页是在服务端就渲染完毕的，能给用户以网站响应速度快的感受，这样可以有效减少用户由于等待网页响应而流失的情况。因此，不管如何，经典网站架构已经满足了前面提到的三条原则中的两条。

注: ==> 
在《高性能浏览器网络》一书中提到：时间的度量是客观的，但是用户的感受却是主观的。我们可以通过工程化的手段，优化用户对网页加载速度的体验。

在经典的网站架构中，浏览页面和数据传输都仍旧依照网络刚设计的时候的方式处理。
当用户打开新的网页或者提交form表单的时候，即使整个网页仅有一小部分内容发生改变，浏览器依旧会发出请求、接收服务端的响应、然后解析整个文档。
这种架构形式是满足我们刚刚提出的前两条准则的，但是对于响应用户操作而言，这不是一个最理想的方案。然而，我们很幸运的生活在了Ajax的时代，除了重载页面之外，可以用Ajax来处理上面的情况，虽然Ajax又会带来另外一些问题，我们将会在下一章节进行讲解。
在我们讲下一章节之前，我们来分析下在经典网站架构中的Ajax。

Ajax时代

XMLHttpRequest对象给网络平台带来了新的火花。然而，在经典网站架构的集成过程中，它并没有优异的表现。这并不是由这项技术本身导致的，而是那些将这项技术集成进网站架构中的工程师们的经验不足造成的。在大多数情况下，这些工程师都是设计师出身，刚刚接触前端(视图)层面。我自己本身就是就是从行政工作助理转行成设计师和开发者的，当初入行的时候对这两块的技术经验都很不够。毫无疑问，我在这几年对于网络应用和平台的技术经验是不断颠覆的。
不幸的是，和我类似没有经历过合理培训及指导的开发者们也在这种技术演进中受尽折磨。
这种网络应用令人遭罪，因为它的开发过程是多面的，要考虑的问题也会因此变得混乱。
我们就以如下的产品展示轮播图来阐述这个问题。
=====图片=====
一个产品展示轮播图通过下面的页标来切换展示。有时，所有的图片是可以提前加载好的，但是当图片过多的时候，预先加载就不合适了。在多数情况下，当我点击下面的页标时，会发出一个网络请求来展示下一页的图片及数据。当然，重新载入整个页面是一种低效的做法，所以一般我们会采用Ajax来获取相关数据。当数据获取到后，我们用Ajax带来的用户体验优化又会给客户端带来html模板及数据结构重复使用的问题。而且一般情况下，这种代码模块是有必要引入单元测试的。
这仅仅是一个简单的例子，在当我们构建一个大型的网站应用的时候，这类问题会使得网站变得难以维护，数据状态也将变得难以追踪。除此之外，刚刚提到的html模板等重复代码本身就是一种对资源的浪费，UI层面的代码分布在客户端和服务端也会让产品迭代等问题变得容易出问题。
====图片=====
如上所示，采用Ajax来处理视图(UI)层面的分层的初衷是很好的。但是这类应用往往会因为碎片化的代码逻辑变得越来越难以维护，同时开发工程师们也会变得心力交瘁。
幸运的是，这些受过苦痛的开发者往往也是最具有创造力的。而且，正是因为这些不好的开发体验作为驱动，配合工程师们扎实的技术实力，才带领我们能够向下一代网站架构进发。

单页面应用

事物的发展都是有周期性的。当网络刚出现那会，客户端在网站架构中的比重很小，大多数类似Sun微系统公司的网络终端(NeWT)。在2011年开始，网络应用开始转型成重客户端的模式，正如操作系统的以前的架构演进一样。这种架构模式逐渐进入大众的视野，随之而来的就是单页面应用架构模式(SPA)。

SPA通过将页面渲染和业务逻辑迁移到客户端来消除传统网站架构带来的遭罪问题。这种模式将应用的数据获取及UI逻辑集成进了一种语言和运行时，极大的缓解了服务端对于客户端开发带来的问题。
 
====图片====

SPA降低了约束，因为服务端仅需发送给客户端JS，html模板和其他资源即可。客户端仅需要从服务端获取页面渲染所需要的数据即可。这种方式显著的提高了页面的渲染速度，因为页面不需要在用户发送请求和提交数据的时候加载整个文档内容。除了性能上的提升，这种模式也解决了上文提出的Ajax给网页带来的问题。
让我们再回到产品展示轮播图的那个例子。第一页的产品展示图是由服务端渲染好的，接下来每页的产品展示是通过网络请求获取数据后由客户端渲染的。在这个过程中，原本在经典网站架构中出现的响应速度和重复网页内容的问题，并不存在于SPA中。
在SPA架构中，前后端的响应是存在一条明确的分界线的。API服务端提供响应数据请求，应用服务端提供静态资源，客户端的工作则是整合这些数据和资源返回。在产品展示轮播图那个例子中，整个文档包括了由应用服务器发送给浏览器的JS文件和前端模板。浏览器解析这些静态资源并从API服务器获取渲染页面所需要的数据。在获取数据后，浏览器会渲染第一页数据。在点击下面的页标时，数据获取和前端渲染将会遵循同样的逻辑。 这简直是个非常出色的工程解决方案。然而，不幸的是它并不总是带来最佳的用户体验。

在SPA中，由于需要等待数据从服务端返回才能进行页面的渲染，这种形式页面加载形式对于用户来说是缓慢的。相比于之前用户可以立刻看到网页内容来说，现在用户看到的是网页正在加载中的动态提示。一个最常见减轻页面延迟的解决方案就是在页面到达客户端的时候就已经获取到了相关数据。然而，这种方式严重依赖着服务端的逻辑，并且将页面响应又回归到了应用服务和API服务端夹杂的情况，同时对于工程师来说多了一层需要维护的代码。

SPA应用面临的下一个问题就是用户体验和产品迭代。 SPA对于搜索引擎并不友好，这意味着用户并不能通过搜索引擎找到应用的内容，这个问题源于SPA应用依赖hash形式的路由处理。在我们评估SEO带来的影响前，我们先看下SPA的路由机制。

SPA应用【page 17】



